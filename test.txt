typedef struct huf
{int weight;
int parent,lchild,rchild;               //哈夫曼树结点 
}HTNode,*Huffmantree;

FILE* fptr=NULL;						//文件指针，指向输入的文件 

Huffmantree HT=NULL;                     //哈夫曼树指针 


int filetype(char ch[])              //根据输入的文件名得到文件类型，返回.在数组中的下标 
{int i=0,n;
while(ch[i]!='\0')               
	{if(ch[i]=='.')                  //找到最后一个.的位置 
		n=i;
	i++;}
return n;}                                      
	             

void Select(int n,int* s1,int* s2)        // 从数组元素HT[0~n]中选取两个没有双亲的权值最小的结点  
{int i,temp;                               //通过s1,s2指向其下标 
for(i=0;i<=n;i++)
	if(HT[i].weight>0&&HT[i].parent==-1)  //找到第一个没有双亲的非零权值的结点 
		{*s1=i;
		 break;}
for(i=i+1;i<=n;i++)                                   
	{if(HT[i].weight>0&&HT[i].parent==-1)       // 找到第二个没有双亲的非零权值的结点
		{*s2=i;
		 break;}
	}
if(HT[*s2].weight<HT[*s1].weight)              //使*s1<*s2 
	{temp=*s1;
	 *s1=*s2;
	 *s2=temp;
	}
for(i=i+1;i<=n;i++)                                 //顺序遍历，寻找权值最小且无双亲的结点下标 
	if(HT[i].weight>0&&HT[i].parent==-1)
		if(HT[i].weight<HT[*s1].weight)
			{*s2=*s1;
			*s1=i;}
		else if(HT[i].weight<HT[*s2].weight)
			*s2=i;
return;						
}


int CreateHuffmantree(char filename[])                              //创建哈夫曼树HT，返回结点个数 
{int i,k,n=0;
 int s1,s2;
HT=(Huffmantree)malloc(sizeof(HTNode)*512);              
if((fptr=fopen(filename,"rb")) ==NULL)
	{printf("can't open the source file\n");
	return 0;} 
for(i=0;i<=255;i++)
 	{HT[i].parent=HT[i].lchild=HT[i].rchild=-1;      //对各结点初始化 
	HT[i].weight=0;}
while((k=fgetc(fptr))!=EOF)
	{if(HT[k].weight==0)                             //顺序从文件中读入字符，统计权值 
		n++;                            //n用来统计结点个数 
 	 HT[k].weight++;
	}
rewind(fptr);
for(i=256;i<256+n-1;i++)                      //循环n-1次，依次合并两个权值最小的结点，建立哈夫曼树 
 	{Select(i-1,&s1,&s2);
	HT[s1].parent=i;                              
	HT[s2].parent=i;
	HT[i].lchild=s1;
	HT[i].rchild=s2;
	HT[i].weight=HT[s1].weight+HT[s2].weight;
	HT[i].parent=-1;
   	}
return n;
}


char** CreateHuffmancode(int n)                   //哈夫曼编码 
{int i,j,start,pre;             //start记录编码字符串在cd中存放的位置 ，j表示当前带编码的字符下标，pre表示j的双亲结点下标 
char**HC=(char**)malloc(sizeof(char*)*256);         
for(i=0;i<256;i++)
	HC[i]=(char*)malloc(sizeof(char)*(n+1));      //为各个字符的编码分配内存 
char cd[n];
cd[n-1]='\0';                            //cd为临时空间 

for(i=0;i<=255;i++)                             //逐个求解各字符的编码 
	{	if(HT[i].weight==0)
			HC[i]='\0';
		else
			{start=n-1;             // 初始化n-1 
			j=i;                    //当前带编码的 字符下标 
			pre=HT[j].parent;
			while(pre!=-1)         //循环直到回溯到根结点 
				{start--;             //回溯 
				if(HT[pre].lchild==j)     //左支生成编码0 
					cd[start]='0';
				else 
					cd[start]='1';          //右支生成编码1 
				j=pre;
				pre=HT[j].parent;
				}
			strcpy(HC[i],&cd[start]);	 //将当前字符下标i的编码放入HC[i]中 
			}	
	}
return HC;	
}

void  Huffmandecoding(FILE* fptr1,int num,int pos,char*filename,int k )          //译码 
{rewind(fptr1);                          //将待译码的文件位置指针指向文件头 
 FILE* fptr2;
 char objectfile[10]="out2";
strcat(objectfile,&filename[k]);; 
if((fptr2=fopen(objectfile,"wb")) ==NULL)
	printf("can't open the object file\n");
int c;
int i,j,m,p,weight;                      //i存储根结点下标，p为当前结点下标 
for(i=0;i<=512;i++)                         
	if((HT[i].parent==-1)&&HT[i].weight>0)        //找到哈夫曼树的根结点 的下标i 
			 break;
p=i;                                
while((c=fgetc(fptr1))!=EOF)                     //每次读入一个字符 
		{num--;
		for(weight=128;weight>0;weight=weight/2)
			{m=c/weight;                            //m为当前字符的位的值 
			c=c%weight;
			if(m==0)                                //从根结点依次读入的位，若为0，走向左孩子 
				p=HT[p].lchild;
			if(m==1)                               //若为1，走向右孩子 
				p=HT[p].rchild;
			if(HT[p].lchild==-1&&HT[p].rchild==-1)       //达到某一叶子结点 
				{fputc(p,fptr2);                         //将该叶子结点下标输出 
				p=i;
				if(num==-1&&weight==pos*2)
					break;}
			}                                   //回到根结点 
		}
printf("译码已完成，译码结果存储在文件out2中");
fclose(fptr2);
return; 
}

int main(void)
{int n,i,j,k,weight,pos,num=0;
char c,ch;
char **HC;
FILE* fptr0;
FILE* fptr1;
if((fptr0=fopen("out0.txt","w+")) ==NULL)
	printf("can't open the object file\n");
if((fptr1=fopen("out1.txt","wb+")) ==NULL)
	printf("can't open the object file\n");
printf("请输入当前目录下要进行哈夫曼编码的文件名（附格式）："); 
char filename[100];
gets(filename);
n=CreateHuffmantree(filename);
if(n==0)
	return 0; 
if(n==1)
	{rewind(fptr);
	while((c=fgetc(fptr))!=EOF)
		{k++;
		ch=c;
		fputc('0',fptr0);
		if(k%8==0)
			fputc((char)0,fptr1); }
	fputc((char)0,fptr1);}
	
else	
{HC=CreateHuffmancode(n);            //得到哈夫曼编码表 

while((i=fgetc(fptr))!=EOF)
	fputs(HC[i],fptr0);                     //将要进行编码的文件转化成01序列，以文件的形式存储起来 
	
	
rewind(fptr0);	
weight=128;
j=0;
while((i=fgetc(fptr0))!=EOF)                 //对得到的01序列文件进行压缩 ，生成二进制文件 
	{j+=(i-48)*weight;
	weight=weight/2;                           
	 if(weight==0)                            //每8位输出一个字符到文件out1中，然后初始化参数 
		{weight=128;                           
		fputc((unsigned char)j,fptr1); 
		num++;  
		j=0;}
	}
if(weight!=0)
	{fputc(j,fptr1);
	pos=weight;	}   }                             //最后不足8位的后面补0输出 
printf("文件编码已完成，结果存储在文件out1中。\n输入y将对二进制文件译码，输入n退出程序:\n");
c=getchar();
if(c=='y')
	if(n>1)
	{
		Huffmandecoding(fptr1,num,pos,filename,filetype(filename)); 
		free(HT);                 //释放动态分配的内存 
	for(i=0;i<256;i++)
		free(HC[i]);               
	free(HC);}
	else
	{	rewind(fptr1);                          //将待译码的文件位置指针指向文件头 
 		FILE* fptr2;
 		char objectfile[10]="out2";
		strcat(objectfile,&filename[filetype(filename)]);; 
		if((fptr2=fopen(objectfile,"wb")) ==NULL)
			printf("can't open the object file\n");
		for(i=0;i<k;i++)
			fputc(ch,fptr2);
		printf("译码已完成，译码结果存储在文件out2中");
		fclose(fptr2);}


fclose(fptr);
fclose(fptr0);                //关闭文件 
fclose(fptr1);
return 0;
} 